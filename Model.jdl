// ------------------------------------------------------------------ 
// OPERATOR
// ------------------------------------------------------------------ 

/**
 * Operator entity
 */ 
entity Operator {
	phoneNumber String	
	gender Gender required
	hireDate ZonedDateTime
}

// ------------------------------------------------------------------ 
// CUSTOMER
// ------------------------------------------------------------------ 

/**
 * Customer
 */
entity Customer {
    phoneNumber String required
	gender Gender required
	dateOfBirth LocalDate required
}
enum Gender { MALE, FEMALE }
entity CustomerAddress {
	streetAddress String
    city String required minlength(3)
    postalCode String required maxlength(10)
    stateProvince String
}
entity Region {
	regionName String
}
entity Country {
	countryName String
}

// ------------------------------------------------------------------ 
// MARKETPLACE
// ------------------------------------------------------------------ 

/**
 * Market entity 
 */
 entity Market {
	name String required minlength(3)
    content TextBlob required
}

entity ProductCategory {
	key String required minlength(2)
    value String required minlength(2)
    activated Boolean required
    defaultSortOrder String
	status CategoryStatus
}

// Todo - replace by boolean
enum CategoryStatus {
    AVAILABLE, RESTRICTED, DISABLED
}

entity MarketInfo {
	key String
    value String
}

// ------------------------------------------------------------------ 
// ORDER
// ------------------------------------------------------------------ 

/**
 * Order entity
 * 
 * An order can contain many items, and an MarketProduct can appear in many different orders
 * Each Order is associated with one or more OrderLines.
 * Each OrderLine is associated with one and only one Order.
 * Each OrderLine is associated with one and only one Product.
 * Each Product is associated with zero or more OrderLines.
 */
entity MarketOrders {
	orderDate ZonedDateTime
	shipdate LocalDate required
	totalPrice BigDecimal
	discount String
	weight BigDecimal
	trackingNumber String
	ordertatus OrderStatus required
	remoteVirtualCardId String
	marketOrderId String
}
enum OrderStatus { 
	PAID, VALIDATED, SHIPPED
}

entity Shipments {
	// shipperId
	shipperType String
	companyName String
	phone String
	
}
entity Invoices {
	// invoiceId
	invoiceDate LocalDate
	invoiceDetails String
}

entity Payment {
	// paymentID Integer
	date LocalDate
	amount Double
	allowed Boolean
	paymentType PaymentType
}
enum PaymentType {
	CREDITCARD, MOBILE, ONLINESYSTEM
}

/**
 * MarketOrderItems = MarketOrderline
 * cross-reference table Order-Line,
 * holds information on each product ordered on one order with quantity fiedl
 * since customer can purchase multiple items on the same order
 */
entity MarketOrderline {
	quantity Integer
}

entity MarketOrderItemsDetails {
	key String
    value String
}

/**
 * hold market ordered product information
 */
entity MarketProduct {
	title String required
    description String
	price BigDecimal
	category String required
	img ImageBlob
}
entity MarketProductCategory {
	title String required
    description String
}

/**
 * Attributes / deatils of product: color, size, ..
 */
entity MarketProductAttributes {
	key String
    value String
}

// ------------------------------------------------------------------ 
// RELATIOSHIPS
// ------------------------------------------------------------------ 
// Defining relationships

// TODO - FACTORISE IN multiple line declaration

relationship OneToOne{
    Customer{user} to User
}
relationship OneToOne{
    Operator{user} to User
}
relationship OneToMany {
	Customer{address} to CustomerAddress{customer}
}
relationship OneToOne {
	CustomerAddress{country} to Country
}
relationship OneToOne {
	Country{region} to Region
}


relationship OneToOne {
 	MarketOrders{payment} to Payment{order}
}
relationship OneToOne {
	MarketOrders{shipper} to Shipments{order}
}
relationship OneToMany {
	MarketOrderline{details} to MarketOrderItemsDetails
}
relationship OneToMany {
	MarketOrderline{details} to MarketProduct
}
relationship ManyToOne {
	MarketProduct{category} to MarketProductCategory
}
relationship OneToMany {
	MarketOrders{quantity} to MarketOrderline
}
relationship OneToMany {
	MarketProduct{attributes} to MarketProductAttributes
}

relationship OneToMany {
  Customer{order} to MarketOrders{customer}
}

relationship OneToMany {
	Market{info} to MarketInfo{market}
}

relationship OneToMany {
	Market{category} to ProductCategory{market}
}


// ------------------------------------------------------------------ 
// PAGINATION options
// ------------------------------------------------------------------ 
// "Pager" depracated in angular 2, 
// options : pagination, infinite-scroll

paginate MarketOrderline, Customer with infinite-scroll
paginate Operator,MarketOrders with pagination

// ------------------------------------------------------------------ 
// SERVICE	
// ------------------------------------------------------------------ 

// generate a Spring Service bean,  which is where Amazon and Cidsocunt applicationâ€™s business logic is supposed to be coded.
// no interface
// service just market partner 

// no service for Customer 
// will create a resource class which will call the repository interface directly.

// Set service options to all except few
// service all with serviceImpl except MarketInfo, ProductCategory

// will make the resource call the service class which will call the repository interface
service Market with serviceClass


// will make a service interface which will be used by the resource class. The interface is implemented by an impl class which will call the repository interface.
service ProductCategory with serviceImpl

// ------------------------------------------------------------------ 
// SERIVCE MASS OPTION-  Set DTO
// ------------------------------------------------------------------ 

// dto * with mapstruct except MarketInfo // error
dto * with mapstruct


// ------------------------------------------------------------------ 
// No angular suffixe
// ------------------------------------------------------------------ 
// Set an angular suffix
// angularSuffix * with mySuffix
