/**
 * Market has none, one or more ProductCategory objects, and the ProductCategory knows its owner
 * A many-to-one unidirectional relationship means that the cars know their owner, but not the opposite.
 * Market has none, one or more ProductCategory objects, and the ProductCategory knows its Market owner
 *
 *  a ProductCategory can have only one cstomer owner.
 * A bidirectional one-to-many relationship : from a ProductCategory instance you could find its owner Market, and from a Market instance you could get all of its ProductCategory.
 * this is a simple one-to-many relationship (one Market has many ProductCategory) on one side, and a many-to-one relationship (many ProductCategorys have one Market) on the other side
 * will be able to add or remove category from the Market entity
 *
 * todo - market is singleton
 *
 * @author The SNE team.
 */
entity Market {
	name String required minlength(3),
    content TextBlob required
}

/**
 * Market Product category
 */
entity ProductCategory {
	key String required minlength(2),
    value String required minlength(2),
    activated Boolean required,
    defaultSortOrder String,
	status CategoryStatus

}

enum CategoryStatus {
    AVAILABLE, RESTRICTED, DISABLED
}

relationship OneToMany {
	Market{category} to ProductCategory{market}
}


// A market can have property different from another market 
// dictionnaries, key value info : secretkey, image, url, etc ....
// will be able to add or remove info from the Market entity

entity MarketInfo {
	key String,
    value String
}

relationship OneToMany {
	Market{info} to MarketInfo{market}
}


