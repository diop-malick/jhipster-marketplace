/**
 * Operator entity
 */ 
entity Operator {
	firstName String
	lastName String
	email String
	phoneNumber String
	hireDate ZonedDateTime
	gender Gender required
}

/**
 * Customer
 */
entity Customer {
    telephone String required
	gender Gender required
	dateOfBirth LocalDate required
}
enum Gender { MALE, FEMALE }
entity CustomerAddress {
	streetAddress String
    city String required minlength(3)
    postalCode String required maxlength(10)
    stateProvince String
}
entity Region {
	regionName String
}
entity Country {
	countryName String
}

/**
 * Market entity 
 */
 entity Market {
	name String required minlength(3)
    content TextBlob required
}

entity ProductCategory {
	key String required minlength(2)
    value String required minlength(2)
    activated Boolean required
    defaultSortOrder String
	status CategoryStatus
}

enum CategoryStatus {
    AVAILABLE, RESTRICTED, DISABLED
}
entity MarketInfo {
	key String
    value String
}
 
/**
 * Order entity
 */
entity MarketOrder {
	orderDate LocalDate
	date ZonedDateTime required
	status Status required
	remoteVirtualCardId String
	marketOrderId String
}
enum Status { PAYED, VALIDATED, SHIPPED }
entity MarketInfo {
	key String
    value String
}
entity Payment {
	id Integer
	date LocalDate
	amount Double
}
enum PaymentType {
	CARD, MOBILE, ONLINESYSTEM
}
entity MarketOrderItems {
	title String required,
    description String,
	price BigDecimal,
	img ImageBlob ,
	name String
	// quantity Integer
}

// Defining relationships
relationship OneToOne{
    Customer{user} to User
}
relationship OneToOne{
    Operator{user} to User
}
relationship OneToMany {
	Customer{address} to CustomerAddress{customer}
}
relationship OneToOne {
	CustomerAddress{country} to Country
}
relationship OneToOne {
	Country{region} to Region
}


relationship OneToOne {
  MarketOrder{payment} to Payment{order}
}
relationship OneToMany {
  MarketOrder{items} to MarketOrderItems{order}
}
relationship OneToMany {
  MarketOrder{quantity} to MarketOrderItems
}
relationship OneToMany {
  Customer{order} to MarketOrder{customer}
}

relationship OneToMany {
	Market{info} to MarketInfo{market}
}

relationship OneToMany {
	Market{category} to ProductCategory{market}
}



// PAGINATION options

paginate MarketOrderItems, Customer with infinite-scroll
paginate Operator,MarketOrder with pagination
paginate Market with pager

// SERVICE
// no service for Customer 
// will create a resource class which will call the repository interface directly.

// Set service options to all except few
// service all with serviceImpl except MarketInfo, ProductCategory

// SERVICE	
// todo - no need, delete 

// will make the resource call the service class which will call the repository interface
service Market with serviceClass


// will make a service interface which will be used by the resource class. The interface is implemented by an impl class which will call the repository interface.
service ProductCategory with serviceImpl

// SERIVCE MASS OPTION-  Set DTO
// dto * with mapstruct except MarketInfo // error
dto * with mapstruct


// Set an angular suffix
angularSuffix * with mySuffix
