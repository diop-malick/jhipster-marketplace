// Custumer has none, one or more Order objects, and the Order knows its owner
//  a Order can have only one cstomer owner.
// A bidirectional one-to-many relationship : from a Order instance you could find its owner Customer, and from a Customer instance you could get all of its Order.
// this is a simple one-to-many relationship (one Customer has many Order) on one side, and a many-to-one relationship (many Orders have one customer) on the other side

/**
 * An order from marketplace partner catalog
 */
entity MarketOrder {
	orderDate Date,
	date ZonedDateTime required,
	status Status required,
	remoteVirtualCardId String,
	marketOrderId String
}

enum Status { PAYED, VALIDATED, SHIPPED }

relationship OneToMany {
  Customer{order} to MarketOrder{customer}
}

/**
 * Order Payment Method
 * 
 * Order can have only one paymentMethod, payment object is link to one order instance
 */
entity Payment {
	id Integer,
	date Date,
	amount Double
}
enum PaymentType {
	CARD, MOBILE, ONLINESYSTEM
}

relationship OneToOne {
  MarketOrder{payment} to Payment{order}
}
// OrderItem = product ordered from market = 

// many-to-many relationship : A Order can contain one or many OrderItems/products, but a products can also used in many orders. 
// At the database level, this means we will have a join table between the Order and the orderItems tables.
// extra field quantity are in this join table
// For JPA, one of those two entities will need to manage the relationship: in our case, that would be the Order entity, which will be responsible to add or remove OrderItems.
// from a Product instance , no need to find its order, 
// from a Order instance, you could get all of its product ordered.
// On the generated AngularJS client UI , you will have a multi-select dropdown in Order to select multiple Product since Order is the owning side.


entity MarketOrderItems {
	title String required,
    description String,
	price BigDecimal,
	img ImageBlob ,
	name String
	// quantity Integer
}
paginate MarketOrderItems with infinite-scroll
paginate MarketOrder with pagination

/** each Order can have an unique quantity for a productItem  
* How do that ?
*/

// JHipster don't support aditional fields in the relationship table
// need to doo two one-to-many relationships

// not ok - 
// relationship ManyToMany { Order{items} to OrderItems{order} }

// ?
relationship OneToMany {
  MarketOrder{items} to MarketOrderItems{order}
}
relationship OneToMany {
  MarketOrder{quantity} to MarketOrderItems
}